{"version":3,"sources":["lib.js","index.js"],"names":["QRCodeScanner","videoPreview","onError","onCapture","scanner","Instascan","Scanner","video","continuous","mirror","addListener","content","console","info","log","Camera","getCameras","then","cameras","length","start","error","Error","catch","e","stop","document","querySelector","buttonScan","textResult","textError","innerText","JSON","stringify","data","scanning","onclick"],"mappings":"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","file":"src.e31bb0bc.map","sourceRoot":"../src","sourcesContent":["\n// https://github.com/schmich/instascan\nclass QRCodeScanner {\n    \n    constructor(videoPreview, onError, onCapture) {\n        \n        this.videoPreview = videoPreview\n        this.onError = onError\n        this.onCapture = onCapture\n        \n        this.scanner = new Instascan.Scanner({\n            video: this.videoPreview,\n            continuous: true,\n            mirror: true\n        })\n        \n        this.scanner.addListener('scan', content => {\n            console.info('RESULT', content)\n            this.onCapture(content)\n        })\n        \n    }\n    \n    start() {\n        \n        console.log('Scanner START', this.scanner)\n        \n        Instascan.Camera.getCameras()\n            .then(cameras => {\n                if (cameras.length > 0) {\n                    this.scanner.start(cameras[0])\n                }\n                else {\n                    console.error('No cameras found.')\n                    this.onError(new Error('No cameras found.'))\n                }\n            })\n            .catch(e => {\n                console.error(e)\n                this.onError(e)\n            })\n        \n    }\n    \n    stop() {\n        \n        console.log('Scanner STOP', this.scanner)\n        this.scanner.stop()\n        \n    }\n    \n}\n\nexport default QRCodeScanner\n","import QRCodeScanner from './lib.js'\n    \nconst video = document.querySelector('#preview')\nconst buttonScan = document.querySelector('#button-scan')\nconst textResult = document.querySelector('#text-result')\nconst textError = document.querySelector('#text-error')\n\nconst onError = e => {\n    textError.innerText = JSON.stringify(e, null, 4)\n}\n\nconst onCapture = data => {\n    textResult.innerText = JSON.stringify(data, null, 4)\n}\n\nlet scanning = false\nconst scanner = new QRCodeScanner(video, onError, onCapture)\n\nbuttonScan.onclick = () => {\n    scanning = !scanning\n    if (scanning) {\n        scanner.start()\n        buttonScan.innerText = 'Stop Scanner'\n    }\n    else {\n        scanner.stop()\n        buttonScan.innerText = 'Scan QR Code'\n    }\n}\n"]}